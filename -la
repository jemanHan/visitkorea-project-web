[1mdiff --git a/README.md b/README.md[m
[1mindex 7f59309..3b53655 100644[m
[1m--- a/README.md[m
[1m+++ b/README.md[m
[36m@@ -1,258 +1,78 @@[m
[31m-# 🇰🇷 VisitKorea 프로젝트[m
[32m+[m[32m# 🇰🇷 VisitKorea 프론트엔드 프로젝트[m
 [m
[31m-## 📋 프로젝트 개요[m
[31m-VisitKorea는 한국 관광지 정보를 제공하는 웹 애플리케이션입니다. 웹 서버와 WAS 서버가 분리된 구조로 운영되며, 자동화된 배포 및 관리 시스템을 갖추고 있습니다.[m
[32m+[m[32m## 🚀 빠른 시작 가이드[m
 [m
[31m-## 🏗️ 시스템 아키텍처[m
[31m-```[m
[31m-[사용자] → [웹 서버 (nginx)] → [WAS 서버 (API)][m
[31m-```[m
[31m-[m
[31m-- **웹 서버**: nginx (포트 80)[m
[31m-- **WAS 서버**: Node.js API 서버 (포트 3002)[m
[31m-- **데이터베이스**: PostgreSQL[m
[31m-- **자동화**: 스크립트 기반 설정 관리 및 모니터링[m
[31m-[m
[31m-## 🚀 빠른 시작[m
[31m-[m
[31m-### 👥 새로운 팀원인 경우[m
[32m+[m[32m### **1단계: 프로젝트 설정**[m
 ```bash[m
[31m-# 1. 프로젝트 클론[m
[31m-git clone [저장소-URL][m
[31m-cd visitkorea-project[m
[32m+[m[32m# 의존성 설치[m
[32m+[m[32mnpm install[m
 [m
[31m-# 2. 자동 설정 실행[m
[31m-./scripts/setup-team.sh[m
[31m-[m
[31m-# 3. API 서버 설정 (각자 자신의 서버 사용)[m
[31m-nano .env  # VITE_API_BASE_URL을 원하는 서버 IP로 변경[m
[32m+[m[32m# 환경변수 설정 (필요시)[m
[32m+[m[32mcp .env.example .env.local[m
 ```[m
 [m
[31m-#### 🔧 API 서버 설정 옵션[m
[31m-- **로컬 개발**: `VITE_API_BASE_URL=http://localhost:3002`[m
[31m-- **팀원 서버**: `VITE_API_BASE_URL=http://팀원-IP:3002`[m
[31m-- **프로덕션**: `VITE_API_BASE_URL=http://13.209.108.148:3002`[m
[31m-- **자신의 서버**: `VITE_API_BASE_URL=http://your-ip:3002`[m
[32m+[m[32m### **2단계: 프론트엔드 실행**[m
 [m
[31m-### 🔧 기존 팀원인 경우[m
[32m+[m[32m**방법 1: 루트에서 실행**[m
 ```bash[m
[31m-# 1. 환경 설정[m
[31m-./scripts/setup-env.sh 13.209.108.148[m
[31m-[m
[31m-# 2. 상태 확인[m
[31m-./scripts/health-check.sh[m
[31m-[m
[31m-# 3. 문제 발생 시[m
[31m-./scripts/auto-recovery.sh[m
[32m+[m[32mnpm run dev:fe[m
 ```[m
 [m
[31m-## 🛠️ 자동화 스크립트[m
[31m-[m
[31m-### 📁 scripts/ 디렉토리[m
[31m-- `setup-team.sh` - **팀원용 초기 설정** (새로운 팀원 필수)[m
[31m-- `switch-api.sh` - **API 서버 전환** (팀원들이 자주 사용)[m
[31m-- `setup-env.sh` - 환경 설정 자동화[m
[31m-- `health-check.sh` - 헬스체크 모니터링[m
[31m-- `auto-recovery.sh` - 자동 복구 시스템[m
[31m-- `setup-cron.sh` - 정기 모니터링 설정[m
[31m-[m
[31m-### 🔧 주요 기능[m
[31m-[m
[31m-#### 1. 환경 설정 자동화 (`setup-env.sh`)[m
[32m+[m[32m**방법 2: 프론트엔드 디렉토리에서 직접 실행**[m
 ```bash[m
[31m-./scripts/setup-env.sh [WAS_SERVER_IP][m
[32m+[m[32mcd apps/frontend[m
[32m+[m[32mnpm run dev[m
 ```[m
[31m-**기능:**[m
[31m-- 환경 변수 파일 자동 생성[m
[31m-- nginx 설정 자동 업데이트[m
[31m-- 프론트엔드 자동 빌드 및 배포[m
[31m-- 연결 테스트 자동 실행[m
 [m
[31m-#### 2. 헬스체크 모니터링 (`health-check.sh`)[m
[31m-```bash[m
[31m-./scripts/health-check.sh [WAS_SERVER_IP][m
[31m-```[m
[31m-**확인 항목:**[m
[31m-- 네트워크 연결 상태[m
[31m-- 포트 연결 상태[m
[31m-- HTTP 헬스체크[m
[31m-- nginx 서비스 상태[m
[31m-- 환경 변수 설정[m
[31m-- 에러 로그 확인[m
[32m+[m[32m## 🌐 서비스 URL[m
[32m+[m[32m- **프론트엔드**: http://localhost:5173 (Vite 기본 포트)[m
[32m+[m[32m- **백엔드 API**: http://localhost:3002 (별도 실행 필요)[m
 [m
[31m-#### 3. 자동 복구 시스템 (`auto-recovery.sh`)[m
[31m-```bash[m
[31m-./scripts/auto-recovery.sh[m
[31m-```[m
[31m-**복구 기능:**[m
[31m-- nginx 서비스 자동 재시작[m
[31m-- 설정 파일 자동 복구[m
[31m-- 환경 변수 파일 자동 생성[m
[31m-- 프론트엔드 자동 재배포[m
[31m-- 로그 파일 정리[m
[32m+[m[32m## 🔧 자주 발생하는 오류 해결[m
 [m
[31m-#### 4. 정기 모니터링 설정 (`setup-cron.sh`)[m
[32m+[m[32m### **포트 충돌 (5173)**[m
 ```bash[m
[31m-./scripts/setup-cron.sh[m
[31m-```[m
[31m-**설정되는 작업:**[m
[31m-- 매 5분: 헬스체크 실행[m
[31m-- 매 30분: 자동 복구 시도[m
[31m-- 매일 새벽 2시: 로그 정리[m
[31m-- 매주 일요일 새벽 3시: 전체 점검[m
[31m-[m
[31m-## 📁 프로젝트 구조[m
[32m+[m[32m# 다른 포트로 실행[m
[32m+[m[32mcd apps/frontend[m
[32m+[m[32mnpm run dev -- --port 3000[m
 ```[m
[31m-visitkorea-project/[m
[31m-├── apps/[m
[31m-│   └── frontend/          # 프론트엔드 (Vite + React)[m
[31m-├── packages/[m
[31m-│   ├── adapters/          # 외부 API 어댑터[m
[31m-│   ├── application/       # 애플리케이션 로직[m
[31m-│   ├── domain/           # 도메인 모델[m
[31m-│   └── shared-types/     # 공유 타입 정의[m
[31m-├── scripts/              # 자동화 스크립트[m
[31m-│   ├── setup-env.sh      # 환경 설정 자동화[m
[31m-│   ├── health-check.sh   # 헬스체크 모니터링[m
[31m-│   ├── auto-recovery.sh  # 자동 복구 시스템[m
[31m-│   └── setup-cron.sh     # 정기 모니터링 설정[m
[31m-├── docs/                 # 📚 문서[m
[31m-│   ├── AUTOMATION_GUIDE.md      # 자동화 시스템 가이드[m
[31m-│   ├── DEPLOYMENT_GUIDE.md      # 배포 가이드[m
[31m-│   ├── TROUBLESHOOTING.md       # 문제 해결 가이드[m
[31m-│   └── AWS_Web_WAS_Server_Separation_Guide.md  # AWS 서버 분리 가이드[m
[31m-├── .env.example          # 환경 변수 예시[m
[31m-├── .env                  # 실제 환경 변수 (자동 생성)[m
[31m-└── README.md             # 이 파일[m
[31m-```[m
[31m-[m
[31m-## 🔄 일반적인 사용 시나리오[m
 [m
[31m-### 시나리오 1: WAS 서버 IP 변경[m
[32m+[m[32m### **의존성 오류**[m
 ```bash[m
[31m-# 1. 새로운 IP로 환경 설정[m
[31m-./scripts/setup-env.sh 192.168.1.100[m
[31m-[m
[31m-# 2. 연결 상태 확인[m
[31m-./scripts/health-check.sh 192.168.1.100[m
[32m+[m[32m# node_modules 재설치[m
[32m+[m[32mrm -rf node_modules package-lock.json[m
[32m+[m[32mnpm install[m
 ```[m
 [m
[31m-### 시나리오 2: 시스템 문제 발생 시[m
[32m+[m[32m### **빌드 오류**[m
 ```bash[m
[31m-# 1. 자동 복구 시도[m
[31m-./scripts/auto-recovery.sh[m
[32m+[m[32m# TypeScript 타입 체크[m
[32m+[m[32mnpm run typecheck[m
 [m
[31m-# 2. 복구 후 상태 확인[m
[31m-./scripts/health-check.sh[m
[32m+[m[32m# 프론트엔드 빌드[m
[32m+[m[32mnpm run build:fe[m
 ```[m
 [m
[31m-### 시나리오 3: 정기 점검[m
[31m-```bash[m
[31m-# 1. 전체 시스템 상태 확인[m
[31m-./scripts/health-check.sh[m
[31m-[m
[31m-# 2. 필요시 자동 복구[m
[31m-./scripts/auto-recovery.sh[m
[31m-```[m
[32m+[m[32m## 📋 주요 명령어[m
 [m
[31m-## 🚨 문제 해결[m
[32m+[m[32m### **루트에서 실행**[m
[32m+[m[32m- `npm run dev:fe` - 프론트엔드 개발 서버 시작[m
[32m+[m[32m- `npm run build:fe` - 프론트엔드 빌드[m
[32m+[m[32m- `npm run typecheck` - TypeScript 타입 체크[m
 [m
[31m-### 자주 발생하는 문제들[m
[31m-[m
[31m-1. **WAS 서버 연결 실패**[m
[31m-   ```bash[m
[31m-   # 해결 방법[m
[31m-   ./scripts/auto-recovery.sh[m
[31m-   ```[m
[31m-[m
[31m-2. **nginx 설정 오류**[m
[31m-   ```bash[m
[31m-   # 해결 방법[m
[31m-   sudo nginx -t[m
[31m-   ./scripts/setup-env.sh [WAS_IP][m
[31m-   ```[m
